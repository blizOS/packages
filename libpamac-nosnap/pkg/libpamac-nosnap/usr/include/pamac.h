/* pamac.h generated by valac 0.56.13, the Vala compiler, do not modify */

#ifndef __SRC_PAMAC_H__
#define __SRC_PAMAC_H__

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gio/gio.h>
#include <float.h>
#include <math.h>

G_BEGIN_DECLS

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define PAMAC_TYPE_PACKAGE (pamac_package_get_type ())
#define PAMAC_PACKAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PAMAC_TYPE_PACKAGE, PamacPackage))
#define PAMAC_PACKAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PAMAC_TYPE_PACKAGE, PamacPackageClass))
#define PAMAC_IS_PACKAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PAMAC_TYPE_PACKAGE))
#define PAMAC_IS_PACKAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PAMAC_TYPE_PACKAGE))
#define PAMAC_PACKAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PAMAC_TYPE_PACKAGE, PamacPackageClass))

typedef struct _PamacPackage PamacPackage;
typedef struct _PamacPackageClass PamacPackageClass;
typedef struct _PamacPackagePrivate PamacPackagePrivate;

#define PAMAC_TYPE_ALPM_PACKAGE (pamac_alpm_package_get_type ())
#define PAMAC_ALPM_PACKAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PAMAC_TYPE_ALPM_PACKAGE, PamacAlpmPackage))
#define PAMAC_ALPM_PACKAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PAMAC_TYPE_ALPM_PACKAGE, PamacAlpmPackageClass))
#define PAMAC_IS_ALPM_PACKAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PAMAC_TYPE_ALPM_PACKAGE))
#define PAMAC_IS_ALPM_PACKAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PAMAC_TYPE_ALPM_PACKAGE))
#define PAMAC_ALPM_PACKAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PAMAC_TYPE_ALPM_PACKAGE, PamacAlpmPackageClass))

typedef struct _PamacAlpmPackage PamacAlpmPackage;
typedef struct _PamacAlpmPackageClass PamacAlpmPackageClass;
typedef struct _PamacAlpmPackagePrivate PamacAlpmPackagePrivate;

#define PAMAC_TYPE_AUR_PACKAGE (pamac_aur_package_get_type ())
#define PAMAC_AUR_PACKAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PAMAC_TYPE_AUR_PACKAGE, PamacAURPackage))
#define PAMAC_AUR_PACKAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PAMAC_TYPE_AUR_PACKAGE, PamacAURPackageClass))
#define PAMAC_IS_AUR_PACKAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PAMAC_TYPE_AUR_PACKAGE))
#define PAMAC_IS_AUR_PACKAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PAMAC_TYPE_AUR_PACKAGE))
#define PAMAC_AUR_PACKAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PAMAC_TYPE_AUR_PACKAGE, PamacAURPackageClass))

typedef struct _PamacAURPackage PamacAURPackage;
typedef struct _PamacAURPackageClass PamacAURPackageClass;
typedef struct _PamacAURPackagePrivate PamacAURPackagePrivate;

#define PAMAC_TYPE_TRANSACTION_SUMMARY (pamac_transaction_summary_get_type ())
#define PAMAC_TRANSACTION_SUMMARY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PAMAC_TYPE_TRANSACTION_SUMMARY, PamacTransactionSummary))
#define PAMAC_TRANSACTION_SUMMARY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PAMAC_TYPE_TRANSACTION_SUMMARY, PamacTransactionSummaryClass))
#define PAMAC_IS_TRANSACTION_SUMMARY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PAMAC_TYPE_TRANSACTION_SUMMARY))
#define PAMAC_IS_TRANSACTION_SUMMARY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PAMAC_TYPE_TRANSACTION_SUMMARY))
#define PAMAC_TRANSACTION_SUMMARY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PAMAC_TYPE_TRANSACTION_SUMMARY, PamacTransactionSummaryClass))

typedef struct _PamacTransactionSummary PamacTransactionSummary;
typedef struct _PamacTransactionSummaryClass PamacTransactionSummaryClass;
typedef struct _PamacTransactionSummaryPrivate PamacTransactionSummaryPrivate;

#define PAMAC_TYPE_UPDATES (pamac_updates_get_type ())
#define PAMAC_UPDATES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PAMAC_TYPE_UPDATES, PamacUpdates))
#define PAMAC_UPDATES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PAMAC_TYPE_UPDATES, PamacUpdatesClass))
#define PAMAC_IS_UPDATES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PAMAC_TYPE_UPDATES))
#define PAMAC_IS_UPDATES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PAMAC_TYPE_UPDATES))
#define PAMAC_UPDATES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PAMAC_TYPE_UPDATES, PamacUpdatesClass))

typedef struct _PamacUpdates PamacUpdates;
typedef struct _PamacUpdatesClass PamacUpdatesClass;
typedef struct _PamacUpdatesPrivate PamacUpdatesPrivate;

#define PAMAC_TYPE_FLATPAK_PACKAGE (pamac_flatpak_package_get_type ())
#define PAMAC_FLATPAK_PACKAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PAMAC_TYPE_FLATPAK_PACKAGE, PamacFlatpakPackage))
#define PAMAC_FLATPAK_PACKAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PAMAC_TYPE_FLATPAK_PACKAGE, PamacFlatpakPackageClass))
#define PAMAC_IS_FLATPAK_PACKAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PAMAC_TYPE_FLATPAK_PACKAGE))
#define PAMAC_IS_FLATPAK_PACKAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PAMAC_TYPE_FLATPAK_PACKAGE))
#define PAMAC_FLATPAK_PACKAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PAMAC_TYPE_FLATPAK_PACKAGE, PamacFlatpakPackageClass))

typedef struct _PamacFlatpakPackage PamacFlatpakPackage;
typedef struct _PamacFlatpakPackageClass PamacFlatpakPackageClass;

#define PAMAC_TYPE_CONFIG (pamac_config_get_type ())
#define PAMAC_CONFIG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PAMAC_TYPE_CONFIG, PamacConfig))
#define PAMAC_CONFIG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PAMAC_TYPE_CONFIG, PamacConfigClass))
#define PAMAC_IS_CONFIG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PAMAC_TYPE_CONFIG))
#define PAMAC_IS_CONFIG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PAMAC_TYPE_CONFIG))
#define PAMAC_CONFIG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PAMAC_TYPE_CONFIG, PamacConfigClass))

typedef struct _PamacConfig PamacConfig;
typedef struct _PamacConfigClass PamacConfigClass;
typedef struct _PamacConfigPrivate PamacConfigPrivate;

#define PAMAC_TYPE_DATABASE (pamac_database_get_type ())
#define PAMAC_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PAMAC_TYPE_DATABASE, PamacDatabase))
#define PAMAC_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PAMAC_TYPE_DATABASE, PamacDatabaseClass))
#define PAMAC_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PAMAC_TYPE_DATABASE))
#define PAMAC_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PAMAC_TYPE_DATABASE))
#define PAMAC_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PAMAC_TYPE_DATABASE, PamacDatabaseClass))

typedef struct _PamacDatabase PamacDatabase;
typedef struct _PamacDatabaseClass PamacDatabaseClass;
typedef struct _PamacDatabasePrivate PamacDatabasePrivate;

#define PAMAC_TYPE_SNAP_PACKAGE (pamac_snap_package_get_type ())
#define PAMAC_SNAP_PACKAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PAMAC_TYPE_SNAP_PACKAGE, PamacSnapPackage))
#define PAMAC_SNAP_PACKAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PAMAC_TYPE_SNAP_PACKAGE, PamacSnapPackageClass))
#define PAMAC_IS_SNAP_PACKAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PAMAC_TYPE_SNAP_PACKAGE))
#define PAMAC_IS_SNAP_PACKAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PAMAC_TYPE_SNAP_PACKAGE))
#define PAMAC_SNAP_PACKAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PAMAC_TYPE_SNAP_PACKAGE, PamacSnapPackageClass))

typedef struct _PamacSnapPackage PamacSnapPackage;
typedef struct _PamacSnapPackageClass PamacSnapPackageClass;

#define PAMAC_TYPE_TRANSACTION (pamac_transaction_get_type ())
#define PAMAC_TRANSACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PAMAC_TYPE_TRANSACTION, PamacTransaction))
#define PAMAC_TRANSACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PAMAC_TYPE_TRANSACTION, PamacTransactionClass))
#define PAMAC_IS_TRANSACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PAMAC_TYPE_TRANSACTION))
#define PAMAC_IS_TRANSACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PAMAC_TYPE_TRANSACTION))
#define PAMAC_TRANSACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PAMAC_TYPE_TRANSACTION, PamacTransactionClass))

typedef struct _PamacTransaction PamacTransaction;
typedef struct _PamacTransactionClass PamacTransactionClass;
typedef struct _PamacTransactionPrivate PamacTransactionPrivate;
typedef struct _PamacSnapPackagePrivate PamacSnapPackagePrivate;
typedef struct _PamacFlatpakPackagePrivate PamacFlatpakPackagePrivate;

#define PAMAC_TYPE_UPDATES_CHECKER (pamac_updates_checker_get_type ())
#define PAMAC_UPDATES_CHECKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PAMAC_TYPE_UPDATES_CHECKER, PamacUpdatesChecker))
#define PAMAC_UPDATES_CHECKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PAMAC_TYPE_UPDATES_CHECKER, PamacUpdatesCheckerClass))
#define PAMAC_IS_UPDATES_CHECKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PAMAC_TYPE_UPDATES_CHECKER))
#define PAMAC_IS_UPDATES_CHECKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PAMAC_TYPE_UPDATES_CHECKER))
#define PAMAC_UPDATES_CHECKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PAMAC_TYPE_UPDATES_CHECKER, PamacUpdatesCheckerClass))

typedef struct _PamacUpdatesChecker PamacUpdatesChecker;
typedef struct _PamacUpdatesCheckerClass PamacUpdatesCheckerClass;
typedef struct _PamacUpdatesCheckerPrivate PamacUpdatesCheckerPrivate;

struct _PamacPackage {
	GObject parent_instance;
	PamacPackagePrivate * priv;
};

struct _PamacPackageClass {
	GObjectClass parent_class;
	const gchar* (*get_name) (PamacPackage* self);
	void (*set_name) (PamacPackage* self, const gchar* value);
	const gchar* (*get_id) (PamacPackage* self);
	void (*set_id) (PamacPackage* self, const gchar* value);
	const gchar* (*get_app_name) (PamacPackage* self);
	const gchar* (*get_app_id) (PamacPackage* self);
	const gchar* (*get_version) (PamacPackage* self);
	void (*set_version) (PamacPackage* self, const gchar* value);
	const gchar* (*get_installed_version) (PamacPackage* self);
	void (*set_installed_version) (PamacPackage* self, const gchar* value);
	const gchar* (*get_desc) (PamacPackage* self);
	void (*set_desc) (PamacPackage* self, const gchar* value);
	const gchar* (*get_long_desc) (PamacPackage* self);
	const gchar* (*get_repo) (PamacPackage* self);
	void (*set_repo) (PamacPackage* self, const gchar* value);
	const gchar* (*get_launchable) (PamacPackage* self);
	const gchar* (*get_license) (PamacPackage* self);
	const gchar* (*get_url) (PamacPackage* self);
	const gchar* (*get_icon) (PamacPackage* self);
	guint64 (*get_installed_size) (PamacPackage* self);
	guint64 (*get_download_size) (PamacPackage* self);
	GDateTime* (*get_install_date) (PamacPackage* self);
	GPtrArray* (*get_screenshots) (PamacPackage* self);
};

struct _PamacAlpmPackage {
	PamacPackage parent_instance;
	PamacAlpmPackagePrivate * priv;
};

struct _PamacAlpmPackageClass {
	PamacPackageClass parent_class;
	GPtrArray* (*get_files) (PamacAlpmPackage* self);
	void (*get_files_async) (PamacAlpmPackage* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GPtrArray* (*get_files_finish) (PamacAlpmPackage* self, GAsyncResult* _res_);
	GDateTime* (*get_build_date) (PamacAlpmPackage* self);
	const gchar* (*get_packager) (PamacAlpmPackage* self);
	const gchar* (*get_reason) (PamacAlpmPackage* self);
	GPtrArray* (*get_validations) (PamacAlpmPackage* self);
	GPtrArray* (*get_groups) (PamacAlpmPackage* self);
	GPtrArray* (*get_depends) (PamacAlpmPackage* self);
	void (*set_depends) (PamacAlpmPackage* self, GPtrArray* value);
	GPtrArray* (*get_optdepends) (PamacAlpmPackage* self);
	GPtrArray* (*get_makedepends) (PamacAlpmPackage* self);
	GPtrArray* (*get_checkdepends) (PamacAlpmPackage* self);
	GPtrArray* (*get_requiredby) (PamacAlpmPackage* self);
	GPtrArray* (*get_optionalfor) (PamacAlpmPackage* self);
	GPtrArray* (*get_provides) (PamacAlpmPackage* self);
	void (*set_provides) (PamacAlpmPackage* self, GPtrArray* value);
	GPtrArray* (*get_replaces) (PamacAlpmPackage* self);
	void (*set_replaces) (PamacAlpmPackage* self, GPtrArray* value);
	GPtrArray* (*get_conflicts) (PamacAlpmPackage* self);
	void (*set_conflicts) (PamacAlpmPackage* self, GPtrArray* value);
	GPtrArray* (*get_backups) (PamacAlpmPackage* self);
};

struct _PamacAURPackage {
	PamacAlpmPackage parent_instance;
	PamacAURPackagePrivate * priv;
};

struct _PamacAURPackageClass {
	PamacAlpmPackageClass parent_class;
	const gchar* (*get_packagebase) (PamacAURPackage* self);
	void (*set_packagebase) (PamacAURPackage* self, const gchar* value);
	const gchar* (*get_maintainer) (PamacAURPackage* self);
	gdouble (*get_popularity) (PamacAURPackage* self);
	GDateTime* (*get_lastmodified) (PamacAURPackage* self);
	GDateTime* (*get_outofdate) (PamacAURPackage* self);
	GDateTime* (*get_firstsubmitted) (PamacAURPackage* self);
	guint64 (*get_numvotes) (PamacAURPackage* self);
};

struct _PamacTransactionSummary {
	GObject parent_instance;
	PamacTransactionSummaryPrivate * priv;
};

struct _PamacTransactionSummaryClass {
	GObjectClass parent_class;
};

struct _PamacUpdates {
	GObject parent_instance;
	PamacUpdatesPrivate * priv;
};

struct _PamacUpdatesClass {
	GObjectClass parent_class;
};

struct _PamacConfig {
	GObject parent_instance;
	PamacConfigPrivate * priv;
};

struct _PamacConfigClass {
	GObjectClass parent_class;
};

struct _PamacDatabase {
	GObject parent_instance;
	PamacDatabasePrivate * priv;
	GCompareFunc vercmp;
};

struct _PamacDatabaseClass {
	GObjectClass parent_class;
};

struct _PamacTransaction {
	GObject parent_instance;
	PamacTransactionPrivate * priv;
};

struct _PamacTransactionClass {
	GObjectClass parent_class;
	void (*ask_commit) (PamacTransaction* self, PamacTransactionSummary* summary, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*ask_commit_finish) (PamacTransaction* self, GAsyncResult* _res_);
	void (*ask_edit_build_files) (PamacTransaction* self, PamacTransactionSummary* summary, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*ask_edit_build_files_finish) (PamacTransaction* self, GAsyncResult* _res_);
	void (*edit_build_files) (PamacTransaction* self, GPtrArray* pkgnames, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*edit_build_files_finish) (PamacTransaction* self, GAsyncResult* _res_);
	void (*ask_import_key) (PamacTransaction* self, const gchar* pkgname, const gchar* key, const gchar* owner, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*ask_import_key_finish) (PamacTransaction* self, GAsyncResult* _res_);
	void (*choose_optdeps) (PamacTransaction* self, const gchar* pkgname, GPtrArray* optdeps, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GPtrArray* (*choose_optdeps_finish) (PamacTransaction* self, GAsyncResult* _res_);
	void (*choose_provider) (PamacTransaction* self, const gchar* depend, GPtrArray* providers, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*choose_provider_finish) (PamacTransaction* self, GAsyncResult* _res_);
	void (*ask_snap_install_classic) (PamacTransaction* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*ask_snap_install_classic_finish) (PamacTransaction* self, GAsyncResult* _res_);
	void (*run_cmd_line_async) (PamacTransaction* self, GPtrArray* args, const gchar* working_directory, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*run_cmd_line_finish) (PamacTransaction* self, GAsyncResult* _res_);
};

struct _PamacSnapPackage {
	PamacPackage parent_instance;
	PamacSnapPackagePrivate * priv;
};

struct _PamacSnapPackageClass {
	PamacPackageClass parent_class;
	const gchar* (*get_channel) (PamacSnapPackage* self);
	const gchar* (*get_publisher) (PamacSnapPackage* self);
	const gchar* (*get_confined) (PamacSnapPackage* self);
	GPtrArray* (*get_channels) (PamacSnapPackage* self);
};

struct _PamacFlatpakPackage {
	PamacPackage parent_instance;
	PamacFlatpakPackagePrivate * priv;
};

struct _PamacFlatpakPackageClass {
	PamacPackageClass parent_class;
};

struct _PamacUpdatesChecker {
	GObject parent_instance;
	PamacUpdatesCheckerPrivate * priv;
};

struct _PamacUpdatesCheckerClass {
	GObjectClass parent_class;
};

VALA_EXTERN GType pamac_package_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PamacPackage, g_object_unref)
VALA_EXTERN const gchar* pamac_package_get_name (PamacPackage* self);
VALA_EXTERN const gchar* pamac_package_get_id (PamacPackage* self);
VALA_EXTERN const gchar* pamac_package_get_app_name (PamacPackage* self);
VALA_EXTERN const gchar* pamac_package_get_app_id (PamacPackage* self);
VALA_EXTERN const gchar* pamac_package_get_version (PamacPackage* self);
VALA_EXTERN const gchar* pamac_package_get_installed_version (PamacPackage* self);
VALA_EXTERN const gchar* pamac_package_get_desc (PamacPackage* self);
VALA_EXTERN const gchar* pamac_package_get_long_desc (PamacPackage* self);
VALA_EXTERN const gchar* pamac_package_get_repo (PamacPackage* self);
VALA_EXTERN const gchar* pamac_package_get_launchable (PamacPackage* self);
VALA_EXTERN const gchar* pamac_package_get_license (PamacPackage* self);
VALA_EXTERN const gchar* pamac_package_get_url (PamacPackage* self);
VALA_EXTERN const gchar* pamac_package_get_icon (PamacPackage* self);
VALA_EXTERN guint64 pamac_package_get_installed_size (PamacPackage* self);
VALA_EXTERN guint64 pamac_package_get_download_size (PamacPackage* self);
VALA_EXTERN GDateTime* pamac_package_get_install_date (PamacPackage* self);
VALA_EXTERN GPtrArray* pamac_package_get_screenshots (PamacPackage* self);
VALA_EXTERN GType pamac_alpm_package_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PamacAlpmPackage, g_object_unref)
VALA_EXTERN GPtrArray* pamac_alpm_package_get_files (PamacAlpmPackage* self);
VALA_EXTERN void pamac_alpm_package_get_files_async (PamacAlpmPackage* self,
                                         GAsyncReadyCallback _callback_,
                                         gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_alpm_package_get_files_finish (PamacAlpmPackage* self,
                                                GAsyncResult* _res_);
VALA_EXTERN GDateTime* pamac_alpm_package_get_build_date (PamacAlpmPackage* self);
VALA_EXTERN const gchar* pamac_alpm_package_get_packager (PamacAlpmPackage* self);
VALA_EXTERN const gchar* pamac_alpm_package_get_reason (PamacAlpmPackage* self);
VALA_EXTERN GPtrArray* pamac_alpm_package_get_validations (PamacAlpmPackage* self);
VALA_EXTERN GPtrArray* pamac_alpm_package_get_groups (PamacAlpmPackage* self);
VALA_EXTERN GPtrArray* pamac_alpm_package_get_depends (PamacAlpmPackage* self);
VALA_EXTERN GPtrArray* pamac_alpm_package_get_optdepends (PamacAlpmPackage* self);
VALA_EXTERN GPtrArray* pamac_alpm_package_get_makedepends (PamacAlpmPackage* self);
VALA_EXTERN GPtrArray* pamac_alpm_package_get_checkdepends (PamacAlpmPackage* self);
VALA_EXTERN GPtrArray* pamac_alpm_package_get_requiredby (PamacAlpmPackage* self);
VALA_EXTERN GPtrArray* pamac_alpm_package_get_optionalfor (PamacAlpmPackage* self);
VALA_EXTERN GPtrArray* pamac_alpm_package_get_provides (PamacAlpmPackage* self);
VALA_EXTERN GPtrArray* pamac_alpm_package_get_replaces (PamacAlpmPackage* self);
VALA_EXTERN GPtrArray* pamac_alpm_package_get_conflicts (PamacAlpmPackage* self);
VALA_EXTERN GPtrArray* pamac_alpm_package_get_backups (PamacAlpmPackage* self);
VALA_EXTERN GType pamac_aur_package_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PamacAURPackage, g_object_unref)
VALA_EXTERN const gchar* pamac_aur_package_get_packagebase (PamacAURPackage* self);
VALA_EXTERN const gchar* pamac_aur_package_get_maintainer (PamacAURPackage* self);
VALA_EXTERN gdouble pamac_aur_package_get_popularity (PamacAURPackage* self);
VALA_EXTERN GDateTime* pamac_aur_package_get_lastmodified (PamacAURPackage* self);
VALA_EXTERN GDateTime* pamac_aur_package_get_outofdate (PamacAURPackage* self);
VALA_EXTERN GDateTime* pamac_aur_package_get_firstsubmitted (PamacAURPackage* self);
VALA_EXTERN guint64 pamac_aur_package_get_numvotes (PamacAURPackage* self);
VALA_EXTERN GType pamac_transaction_summary_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PamacTransactionSummary, g_object_unref)
VALA_EXTERN GPtrArray* pamac_transaction_summary_get_to_install (PamacTransactionSummary* self);
VALA_EXTERN GPtrArray* pamac_transaction_summary_get_to_upgrade (PamacTransactionSummary* self);
VALA_EXTERN GPtrArray* pamac_transaction_summary_get_to_downgrade (PamacTransactionSummary* self);
VALA_EXTERN GPtrArray* pamac_transaction_summary_get_to_reinstall (PamacTransactionSummary* self);
VALA_EXTERN GPtrArray* pamac_transaction_summary_get_to_remove (PamacTransactionSummary* self);
VALA_EXTERN GPtrArray* pamac_transaction_summary_get_conflicts_to_remove (PamacTransactionSummary* self);
VALA_EXTERN GPtrArray* pamac_transaction_summary_get_to_build (PamacTransactionSummary* self);
VALA_EXTERN GType pamac_updates_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PamacUpdates, g_object_unref)
VALA_EXTERN GPtrArray* pamac_updates_get_repos_updates (PamacUpdates* self);
VALA_EXTERN GPtrArray* pamac_updates_get_ignored_repos_updates (PamacUpdates* self);
VALA_EXTERN GPtrArray* pamac_updates_get_aur_updates (PamacUpdates* self);
VALA_EXTERN GPtrArray* pamac_updates_get_ignored_aur_updates (PamacUpdates* self);
VALA_EXTERN GPtrArray* pamac_updates_get_outofdate (PamacUpdates* self);
VALA_EXTERN GType pamac_flatpak_package_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PamacFlatpakPackage, g_object_unref)
VALA_EXTERN GPtrArray* pamac_updates_get_flatpak_updates (PamacUpdates* self);
VALA_EXTERN GType pamac_config_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PamacConfig, g_object_unref)
VALA_EXTERN PamacConfig* pamac_config_new (const gchar* conf_path);
VALA_EXTERN PamacConfig* pamac_config_construct (GType object_type,
                                     const gchar* conf_path);
VALA_EXTERN void pamac_config_add_ignorepkg (PamacConfig* self,
                                 const gchar* name);
VALA_EXTERN void pamac_config_remove_ignorepkg (PamacConfig* self,
                                    const gchar* name);
VALA_EXTERN void pamac_config_reload (PamacConfig* self);
VALA_EXTERN void pamac_config_save (PamacConfig* self);
VALA_EXTERN const gchar* pamac_config_get_conf_path (PamacConfig* self);
VALA_EXTERN gboolean pamac_config_get_recurse (PamacConfig* self);
VALA_EXTERN void pamac_config_set_recurse (PamacConfig* self,
                               gboolean value);
VALA_EXTERN gboolean pamac_config_get_keep_built_pkgs (PamacConfig* self);
VALA_EXTERN void pamac_config_set_keep_built_pkgs (PamacConfig* self,
                                       gboolean value);
VALA_EXTERN gboolean pamac_config_get_enable_downgrade (PamacConfig* self);
VALA_EXTERN void pamac_config_set_enable_downgrade (PamacConfig* self,
                                        gboolean value);
VALA_EXTERN gboolean pamac_config_get_simple_install (PamacConfig* self);
VALA_EXTERN void pamac_config_set_simple_install (PamacConfig* self,
                                      gboolean value);
VALA_EXTERN guint64 pamac_config_get_refresh_period (PamacConfig* self);
VALA_EXTERN void pamac_config_set_refresh_period (PamacConfig* self,
                                      guint64 value);
VALA_EXTERN gboolean pamac_config_get_no_update_hide_icon (PamacConfig* self);
VALA_EXTERN void pamac_config_set_no_update_hide_icon (PamacConfig* self,
                                           gboolean value);
VALA_EXTERN gboolean pamac_config_get_support_aur (PamacConfig* self);
VALA_EXTERN gboolean pamac_config_get_enable_aur (PamacConfig* self);
VALA_EXTERN void pamac_config_set_enable_aur (PamacConfig* self,
                                  gboolean value);
VALA_EXTERN gboolean pamac_config_get_support_appstream (PamacConfig* self);
VALA_EXTERN gboolean pamac_config_get_enable_appstream (PamacConfig* self);
VALA_EXTERN void pamac_config_set_enable_appstream (PamacConfig* self,
                                        gboolean value);
VALA_EXTERN gboolean pamac_config_get_support_snap (PamacConfig* self);
VALA_EXTERN gboolean pamac_config_get_enable_snap (PamacConfig* self);
VALA_EXTERN void pamac_config_set_enable_snap (PamacConfig* self,
                                   gboolean value);
VALA_EXTERN gboolean pamac_config_get_support_flatpak (PamacConfig* self);
VALA_EXTERN void pamac_config_set_support_flatpak (PamacConfig* self,
                                       gboolean value);
VALA_EXTERN gboolean pamac_config_get_enable_flatpak (PamacConfig* self);
VALA_EXTERN void pamac_config_set_enable_flatpak (PamacConfig* self,
                                      gboolean value);
VALA_EXTERN gboolean pamac_config_get_check_flatpak_updates (PamacConfig* self);
VALA_EXTERN void pamac_config_set_check_flatpak_updates (PamacConfig* self,
                                             gboolean value);
VALA_EXTERN const gchar* pamac_config_get_aur_build_dir (PamacConfig* self);
VALA_EXTERN void pamac_config_set_aur_build_dir (PamacConfig* self,
                                     const gchar* value);
VALA_EXTERN gboolean pamac_config_get_check_aur_updates (PamacConfig* self);
VALA_EXTERN void pamac_config_set_check_aur_updates (PamacConfig* self,
                                         gboolean value);
VALA_EXTERN gboolean pamac_config_get_check_aur_vcs_updates (PamacConfig* self);
VALA_EXTERN void pamac_config_set_check_aur_vcs_updates (PamacConfig* self,
                                             gboolean value);
VALA_EXTERN gboolean pamac_config_get_download_updates (PamacConfig* self);
VALA_EXTERN void pamac_config_set_download_updates (PamacConfig* self,
                                        gboolean value);
VALA_EXTERN gboolean pamac_config_get_offline_upgrade (PamacConfig* self);
VALA_EXTERN void pamac_config_set_offline_upgrade (PamacConfig* self,
                                       gboolean value);
VALA_EXTERN guint64 pamac_config_get_max_parallel_downloads (PamacConfig* self);
VALA_EXTERN void pamac_config_set_max_parallel_downloads (PamacConfig* self,
                                              guint64 value);
VALA_EXTERN guint64 pamac_config_get_clean_keep_num_pkgs (PamacConfig* self);
VALA_EXTERN void pamac_config_set_clean_keep_num_pkgs (PamacConfig* self,
                                           guint64 value);
VALA_EXTERN gboolean pamac_config_get_clean_rm_only_uninstalled (PamacConfig* self);
VALA_EXTERN void pamac_config_set_clean_rm_only_uninstalled (PamacConfig* self,
                                                 gboolean value);
VALA_EXTERN GHashTable* pamac_config_get_environment_variables (PamacConfig* self);
VALA_EXTERN const gchar* pamac_config_get_db_path (PamacConfig* self);
VALA_EXTERN gboolean pamac_config_get_checkspace (PamacConfig* self);
VALA_EXTERN void pamac_config_set_checkspace (PamacConfig* self,
                                  gboolean value);
VALA_EXTERN GHashTable* pamac_config_get_ignorepkgs (PamacConfig* self);
VALA_EXTERN gchar* pamac_get_version (void);
VALA_EXTERN GType pamac_database_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PamacDatabase, g_object_unref)
VALA_EXTERN PamacDatabase* pamac_database_new (PamacConfig* config);
VALA_EXTERN PamacDatabase* pamac_database_construct (GType object_type,
                                         PamacConfig* config);
VALA_EXTERN void pamac_database_refresh (PamacDatabase* self);
VALA_EXTERN void pamac_database_get_mirrors_countries_async (PamacDatabase* self,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_get_mirrors_countries_finish (PamacDatabase* self,
                                                        GAsyncResult* _res_);
VALA_EXTERN void pamac_database_get_mirrors_choosen_country_async (PamacDatabase* self,
                                                       GAsyncReadyCallback _callback_,
                                                       gpointer _user_data_);
VALA_EXTERN const gchar* pamac_database_get_mirrors_choosen_country_finish (PamacDatabase* self,
                                                                GAsyncResult* _res_);
VALA_EXTERN gchar* pamac_database_get_alpm_dep_name (PamacDatabase* self,
                                         const gchar* dep_string);
VALA_EXTERN GHashTable* pamac_database_get_clean_cache_details (PamacDatabase* self);
VALA_EXTERN void pamac_database_get_clean_cache_details_async (PamacDatabase* self,
                                                   GAsyncReadyCallback _callback_,
                                                   gpointer _user_data_);
VALA_EXTERN GHashTable* pamac_database_get_clean_cache_details_finish (PamacDatabase* self,
                                                           GAsyncResult* _res_);
VALA_EXTERN GHashTable* pamac_database_get_build_files_details (PamacDatabase* self);
VALA_EXTERN void pamac_database_get_build_files_details_async (PamacDatabase* self,
                                                   GAsyncReadyCallback _callback_,
                                                   gpointer _user_data_);
VALA_EXTERN GHashTable* pamac_database_get_build_files_details_finish (PamacDatabase* self,
                                                           GAsyncResult* _res_);
VALA_EXTERN gboolean pamac_database_is_installed_pkg (PamacDatabase* self,
                                          const gchar* pkgname);
VALA_EXTERN PamacAlpmPackage* pamac_database_get_installed_pkg (PamacDatabase* self,
                                                    const gchar* pkgname);
VALA_EXTERN gboolean pamac_database_has_installed_satisfier (PamacDatabase* self,
                                                 const gchar* depstring);
VALA_EXTERN PamacAlpmPackage* pamac_database_get_installed_satisfier (PamacDatabase* self,
                                                          const gchar* depstring);
VALA_EXTERN GPtrArray* pamac_database_get_installed_pkgs_by_glob (PamacDatabase* self,
                                                      const gchar* glob);
VALA_EXTERN gboolean pamac_database_should_hold (PamacDatabase* self,
                                     const gchar* pkgname);
VALA_EXTERN GPtrArray* pamac_database_get_installed_pkgs (PamacDatabase* self);
VALA_EXTERN void pamac_database_get_installed_pkgs_async (PamacDatabase* self,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_get_installed_pkgs_finish (PamacDatabase* self,
                                                     GAsyncResult* _res_);
VALA_EXTERN void pamac_database_get_installed_apps_async (PamacDatabase* self,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_get_installed_apps_finish (PamacDatabase* self,
                                                     GAsyncResult* _res_);
VALA_EXTERN GPtrArray* pamac_database_get_explicitly_installed_pkgs (PamacDatabase* self);
VALA_EXTERN void pamac_database_get_explicitly_installed_pkgs_async (PamacDatabase* self,
                                                         GAsyncReadyCallback _callback_,
                                                         gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_get_explicitly_installed_pkgs_finish (PamacDatabase* self,
                                                                GAsyncResult* _res_);
VALA_EXTERN GPtrArray* pamac_database_get_foreign_pkgs (PamacDatabase* self);
VALA_EXTERN void pamac_database_get_foreign_pkgs_async (PamacDatabase* self,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_get_foreign_pkgs_finish (PamacDatabase* self,
                                                   GAsyncResult* _res_);
VALA_EXTERN GPtrArray* pamac_database_get_orphans (PamacDatabase* self);
VALA_EXTERN void pamac_database_get_orphans_async (PamacDatabase* self,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_get_orphans_finish (PamacDatabase* self,
                                              GAsyncResult* _res_);
VALA_EXTERN gboolean pamac_database_is_sync_pkg (PamacDatabase* self,
                                     const gchar* pkgname);
VALA_EXTERN PamacAlpmPackage* pamac_database_get_sync_pkg (PamacDatabase* self,
                                               const gchar* pkgname);
VALA_EXTERN gboolean pamac_database_has_sync_satisfier (PamacDatabase* self,
                                            const gchar* depstring);
VALA_EXTERN PamacAlpmPackage* pamac_database_get_sync_satisfier (PamacDatabase* self,
                                                     const gchar* depstring);
VALA_EXTERN GPtrArray* pamac_database_get_sync_pkgs_by_glob (PamacDatabase* self,
                                                 const gchar* glob);
VALA_EXTERN PamacPackage* pamac_database_get_app_by_id (PamacDatabase* self,
                                            const gchar* app_id);
VALA_EXTERN void pamac_database_get_url_stream (PamacDatabase* self,
                                    const gchar* url,
                                    GAsyncReadyCallback _callback_,
                                    gpointer _user_data_);
VALA_EXTERN GInputStream* pamac_database_get_url_stream_finish (PamacDatabase* self,
                                                    GAsyncResult* _res_,
                                                    GError** error);
VALA_EXTERN GPtrArray* pamac_database_search_installed_pkgs (PamacDatabase* self,
                                                 const gchar* search_string);
VALA_EXTERN void pamac_database_search_installed_pkgs_async (PamacDatabase* self,
                                                 const gchar* search_string,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_search_installed_pkgs_finish (PamacDatabase* self,
                                                        GAsyncResult* _res_);
VALA_EXTERN GPtrArray* pamac_database_search_repos_pkgs (PamacDatabase* self,
                                             const gchar* search_string);
VALA_EXTERN void pamac_database_search_repos_pkgs_async (PamacDatabase* self,
                                             const gchar* search_string,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_search_repos_pkgs_finish (PamacDatabase* self,
                                                    GAsyncResult* _res_);
VALA_EXTERN GPtrArray* pamac_database_search_uninstalled_apps (PamacDatabase* self,
                                                   GPtrArray* search_terms);
VALA_EXTERN GPtrArray* pamac_database_search_pkgs (PamacDatabase* self,
                                       const gchar* search_string);
VALA_EXTERN void pamac_database_search_pkgs_async (PamacDatabase* self,
                                       const gchar* search_string,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_search_pkgs_finish (PamacDatabase* self,
                                              GAsyncResult* _res_);
VALA_EXTERN GPtrArray* pamac_database_search_aur_pkgs (PamacDatabase* self,
                                           const gchar* search_string);
VALA_EXTERN void pamac_database_search_aur_pkgs_async (PamacDatabase* self,
                                           const gchar* search_string,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_search_aur_pkgs_finish (PamacDatabase* self,
                                                  GAsyncResult* _res_);
VALA_EXTERN GHashTable* pamac_database_search_files (PamacDatabase* self,
                                         GPtrArray* files);
VALA_EXTERN GPtrArray* pamac_database_get_categories_names (PamacDatabase* self);
VALA_EXTERN void pamac_database_get_category_pkgs_async (PamacDatabase* self,
                                             const gchar* category,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_get_category_pkgs_finish (PamacDatabase* self,
                                                    GAsyncResult* _res_);
VALA_EXTERN GPtrArray* pamac_database_get_repos_names (PamacDatabase* self);
VALA_EXTERN GPtrArray* pamac_database_get_repo_pkgs (PamacDatabase* self,
                                         const gchar* repo);
VALA_EXTERN void pamac_database_get_repo_pkgs_async (PamacDatabase* self,
                                         const gchar* repo,
                                         GAsyncReadyCallback _callback_,
                                         gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_get_repo_pkgs_finish (PamacDatabase* self,
                                                GAsyncResult* _res_);
VALA_EXTERN GPtrArray* pamac_database_get_groups_names (PamacDatabase* self);
VALA_EXTERN GPtrArray* pamac_database_get_group_pkgs (PamacDatabase* self,
                                          const gchar* group_name);
VALA_EXTERN void pamac_database_get_group_pkgs_async (PamacDatabase* self,
                                          const gchar* group_name,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_get_group_pkgs_finish (PamacDatabase* self,
                                                 GAsyncResult* _res_);
VALA_EXTERN PamacAlpmPackage* pamac_database_get_pkg (PamacDatabase* self,
                                          const gchar* pkgname);
VALA_EXTERN GFile* pamac_database_clone_build_files (PamacDatabase* self,
                                         const gchar* pkgname,
                                         gboolean overwrite_files,
                                         GCancellable* cancellable);
VALA_EXTERN void pamac_database_clone_build_files_async (PamacDatabase* self,
                                             const gchar* pkgname,
                                             gboolean overwrite_files,
                                             GCancellable* cancellable,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
VALA_EXTERN GFile* pamac_database_clone_build_files_finish (PamacDatabase* self,
                                                GAsyncResult* _res_);
VALA_EXTERN gboolean pamac_database_regenerate_srcinfo (PamacDatabase* self,
                                            const gchar* pkgname,
                                            GCancellable* cancellable);
VALA_EXTERN void pamac_database_regenerate_srcinfo_async (PamacDatabase* self,
                                              const gchar* pkgname,
                                              GCancellable* cancellable,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
VALA_EXTERN gboolean pamac_database_regenerate_srcinfo_finish (PamacDatabase* self,
                                                   GAsyncResult* _res_);
VALA_EXTERN PamacAURPackage* pamac_database_get_aur_pkg (PamacDatabase* self,
                                             const gchar* pkgname);
VALA_EXTERN void pamac_database_get_aur_pkg_async (PamacDatabase* self,
                                       const gchar* pkgname,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_);
VALA_EXTERN PamacAURPackage* pamac_database_get_aur_pkg_finish (PamacDatabase* self,
                                                    GAsyncResult* _res_);
VALA_EXTERN GHashTable* pamac_database_get_aur_pkgs (PamacDatabase* self,
                                         GPtrArray* pkgnames);
VALA_EXTERN void pamac_database_get_aur_pkgs_async (PamacDatabase* self,
                                        GPtrArray* pkgnames,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_);
VALA_EXTERN GHashTable* pamac_database_get_aur_pkgs_finish (PamacDatabase* self,
                                                GAsyncResult* _res_);
VALA_EXTERN void pamac_database_refresh_tmp_files_dbs_async (PamacDatabase* self,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
VALA_EXTERN void pamac_database_refresh_tmp_files_dbs_finish (PamacDatabase* self,
                                                  GAsyncResult* _res_);
VALA_EXTERN void pamac_database_refresh_tmp_files_dbs (PamacDatabase* self);
VALA_EXTERN GDateTime* pamac_database_get_last_refresh_time (PamacDatabase* self);
VALA_EXTERN gboolean pamac_database_need_refresh (PamacDatabase* self);
VALA_EXTERN PamacUpdates* pamac_database_get_updates (PamacDatabase* self,
                                          gboolean use_timestamp);
VALA_EXTERN void pamac_database_get_updates_async (PamacDatabase* self,
                                       gboolean use_timestamp,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_);
VALA_EXTERN PamacUpdates* pamac_database_get_updates_finish (PamacDatabase* self,
                                                 GAsyncResult* _res_);
VALA_EXTERN void pamac_database_search_snaps_async (PamacDatabase* self,
                                        const gchar* search_string,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_);
VALA_EXTERN GType pamac_snap_package_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PamacSnapPackage, g_object_unref)
VALA_EXTERN GPtrArray* pamac_database_search_snaps_finish (PamacDatabase* self,
                                               GAsyncResult* _res_);
VALA_EXTERN gboolean pamac_database_is_installed_snap (PamacDatabase* self,
                                           const gchar* name);
VALA_EXTERN void pamac_database_get_snap_async (PamacDatabase* self,
                                    const gchar* name,
                                    GAsyncReadyCallback _callback_,
                                    gpointer _user_data_);
VALA_EXTERN PamacSnapPackage* pamac_database_get_snap_finish (PamacDatabase* self,
                                                  GAsyncResult* _res_);
VALA_EXTERN void pamac_database_get_installed_snaps_async (PamacDatabase* self,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_get_installed_snaps_finish (PamacDatabase* self,
                                                      GAsyncResult* _res_);
VALA_EXTERN void pamac_database_get_installed_snap_icon_async (PamacDatabase* self,
                                                   const gchar* name,
                                                   GAsyncReadyCallback _callback_,
                                                   gpointer _user_data_);
VALA_EXTERN gchar* pamac_database_get_installed_snap_icon_finish (PamacDatabase* self,
                                                      GAsyncResult* _res_);
VALA_EXTERN void pamac_database_get_category_snaps_async (PamacDatabase* self,
                                              const gchar* category,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_get_category_snaps_finish (PamacDatabase* self,
                                                     GAsyncResult* _res_);
VALA_EXTERN void pamac_database_refresh_flatpak_appstream_data (PamacDatabase* self);
VALA_EXTERN void pamac_database_refresh_flatpak_appstream_data_async (PamacDatabase* self,
                                                          GAsyncReadyCallback _callback_,
                                                          gpointer _user_data_);
VALA_EXTERN void pamac_database_refresh_flatpak_appstream_data_finish (PamacDatabase* self,
                                                           GAsyncResult* _res_);
VALA_EXTERN GPtrArray* pamac_database_get_flatpak_remotes_names (PamacDatabase* self);
VALA_EXTERN void pamac_database_get_installed_flatpaks_async (PamacDatabase* self,
                                                  GAsyncReadyCallback _callback_,
                                                  gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_get_installed_flatpaks_finish (PamacDatabase* self,
                                                         GAsyncResult* _res_);
VALA_EXTERN void pamac_database_search_flatpaks_async (PamacDatabase* self,
                                           const gchar* search_string,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_search_flatpaks_finish (PamacDatabase* self,
                                                  GAsyncResult* _res_);
VALA_EXTERN gboolean pamac_database_is_installed_flatpak (PamacDatabase* self,
                                              const gchar* name);
VALA_EXTERN void pamac_database_get_flatpak_async (PamacDatabase* self,
                                       const gchar* id,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_);
VALA_EXTERN PamacFlatpakPackage* pamac_database_get_flatpak_finish (PamacDatabase* self,
                                                        GAsyncResult* _res_);
VALA_EXTERN void pamac_database_get_category_flatpaks_async (PamacDatabase* self,
                                                 const gchar* category,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_database_get_category_flatpaks_finish (PamacDatabase* self,
                                                        GAsyncResult* _res_);
VALA_EXTERN PamacConfig* pamac_database_get_config (PamacDatabase* self);
VALA_EXTERN void pamac_database_set_config (PamacDatabase* self,
                                PamacConfig* value);
VALA_EXTERN GType pamac_transaction_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PamacTransaction, g_object_unref)
VALA_EXTERN PamacTransaction* pamac_transaction_new (PamacDatabase* database);
VALA_EXTERN PamacTransaction* pamac_transaction_construct (GType object_type,
                                               PamacDatabase* database);
VALA_EXTERN void pamac_transaction_quit_daemon (PamacTransaction* self);
VALA_EXTERN void pamac_transaction_ask_commit (PamacTransaction* self,
                                   PamacTransactionSummary* summary,
                                   GAsyncReadyCallback _callback_,
                                   gpointer _user_data_);
VALA_EXTERN gboolean pamac_transaction_ask_commit_finish (PamacTransaction* self,
                                              GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_ask_edit_build_files (PamacTransaction* self,
                                             PamacTransactionSummary* summary,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
VALA_EXTERN gboolean pamac_transaction_ask_edit_build_files_finish (PamacTransaction* self,
                                                        GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_edit_build_files (PamacTransaction* self,
                                         GPtrArray* pkgnames,
                                         GAsyncReadyCallback _callback_,
                                         gpointer _user_data_);
VALA_EXTERN void pamac_transaction_edit_build_files_finish (PamacTransaction* self,
                                                GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_ask_import_key (PamacTransaction* self,
                                       const gchar* pkgname,
                                       const gchar* key,
                                       const gchar* owner,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_);
VALA_EXTERN gboolean pamac_transaction_ask_import_key_finish (PamacTransaction* self,
                                                  GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_get_build_files_async (PamacTransaction* self,
                                              const gchar* pkgname,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_transaction_get_build_files_finish (PamacTransaction* self,
                                                     GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_choose_optdeps (PamacTransaction* self,
                                       const gchar* pkgname,
                                       GPtrArray* optdeps,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_);
VALA_EXTERN GPtrArray* pamac_transaction_choose_optdeps_finish (PamacTransaction* self,
                                                    GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_choose_provider (PamacTransaction* self,
                                        const gchar* depend,
                                        GPtrArray* providers,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_);
VALA_EXTERN gint pamac_transaction_choose_provider_finish (PamacTransaction* self,
                                               GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_ask_snap_install_classic (PamacTransaction* self,
                                                 const gchar* name,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
VALA_EXTERN gboolean pamac_transaction_ask_snap_install_classic_finish (PamacTransaction* self,
                                                            GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_get_authorization_async (PamacTransaction* self,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_);
VALA_EXTERN gboolean pamac_transaction_get_authorization_finish (PamacTransaction* self,
                                                     GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_remove_authorization (PamacTransaction* self);
VALA_EXTERN void pamac_transaction_generate_mirrors_list_async (PamacTransaction* self,
                                                    const gchar* country,
                                                    GAsyncReadyCallback _callback_,
                                                    gpointer _user_data_);
VALA_EXTERN void pamac_transaction_generate_mirrors_list_finish (PamacTransaction* self,
                                                     GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_clean_cache_async (PamacTransaction* self,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_);
VALA_EXTERN void pamac_transaction_clean_cache_finish (PamacTransaction* self,
                                           GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_clean_build_files_async (PamacTransaction* self,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_);
VALA_EXTERN void pamac_transaction_clean_build_files_finish (PamacTransaction* self,
                                                 GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_set_pkgreason_async (PamacTransaction* self,
                                            const gchar* pkgname,
                                            guint reason,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
VALA_EXTERN gboolean pamac_transaction_set_pkgreason_finish (PamacTransaction* self,
                                                 GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_download_updates_async (PamacTransaction* self,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
VALA_EXTERN gboolean pamac_transaction_download_updates_finish (PamacTransaction* self,
                                                    GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_run_async (PamacTransaction* self,
                                  GAsyncReadyCallback _callback_,
                                  gpointer _user_data_);
VALA_EXTERN gboolean pamac_transaction_run_finish (PamacTransaction* self,
                                       GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_check_dbs (PamacTransaction* self,
                                  GAsyncReadyCallback _callback_,
                                  gpointer _user_data_);
VALA_EXTERN void pamac_transaction_check_dbs_finish (PamacTransaction* self,
                                         GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_add_pkg_to_install (PamacTransaction* self,
                                           const gchar* name);
VALA_EXTERN void pamac_transaction_add_pkg_to_remove (PamacTransaction* self,
                                          const gchar* name);
VALA_EXTERN void pamac_transaction_add_path_to_load (PamacTransaction* self,
                                         const gchar* path);
VALA_EXTERN void pamac_transaction_add_pkg_to_build (PamacTransaction* self,
                                         const gchar* name,
                                         gboolean clone_build_files,
                                         gboolean clone_deps_build_files);
VALA_EXTERN void pamac_transaction_add_temporary_ignore_pkg (PamacTransaction* self,
                                                 const gchar* name);
VALA_EXTERN void pamac_transaction_add_overwrite_file (PamacTransaction* self,
                                           const gchar* glob);
VALA_EXTERN void pamac_transaction_add_pkg_to_mark_as_dep (PamacTransaction* self,
                                               const gchar* name);
VALA_EXTERN void pamac_transaction_add_pkgs_to_upgrade (PamacTransaction* self,
                                            gboolean force_refresh);
VALA_EXTERN void pamac_transaction_add_snap_to_install (PamacTransaction* self,
                                            PamacSnapPackage* pkg);
VALA_EXTERN void pamac_transaction_add_snap_to_remove (PamacTransaction* self,
                                           PamacSnapPackage* pkg);
VALA_EXTERN void pamac_transaction_snap_switch_channel_async (PamacTransaction* self,
                                                  const gchar* snap_name,
                                                  const gchar* channel,
                                                  GAsyncReadyCallback _callback_,
                                                  gpointer _user_data_);
VALA_EXTERN gboolean pamac_transaction_snap_switch_channel_finish (PamacTransaction* self,
                                                       GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_add_flatpak_to_install (PamacTransaction* self,
                                               PamacFlatpakPackage* pkg);
VALA_EXTERN void pamac_transaction_add_flatpak_to_remove (PamacTransaction* self,
                                              PamacFlatpakPackage* pkg);
VALA_EXTERN void pamac_transaction_add_flatpak_to_upgrade (PamacTransaction* self,
                                               PamacFlatpakPackage* pkg);
VALA_EXTERN void pamac_transaction_run_cmd_line_async (PamacTransaction* self,
                                           GPtrArray* args,
                                           const gchar* working_directory,
                                           GCancellable* cancellable,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_);
VALA_EXTERN gint pamac_transaction_run_cmd_line_finish (PamacTransaction* self,
                                            GAsyncResult* _res_);
VALA_EXTERN void pamac_transaction_cancel (PamacTransaction* self);
VALA_EXTERN PamacDatabase* pamac_transaction_get_database (PamacTransaction* self);
VALA_EXTERN void pamac_transaction_set_database (PamacTransaction* self,
                                     PamacDatabase* value);
VALA_EXTERN gboolean pamac_transaction_get_download_only (PamacTransaction* self);
VALA_EXTERN void pamac_transaction_set_download_only (PamacTransaction* self,
                                          gboolean value);
VALA_EXTERN gboolean pamac_transaction_get_dry_run (PamacTransaction* self);
VALA_EXTERN void pamac_transaction_set_dry_run (PamacTransaction* self,
                                    gboolean value);
VALA_EXTERN gboolean pamac_transaction_get_install_if_needed (PamacTransaction* self);
VALA_EXTERN void pamac_transaction_set_install_if_needed (PamacTransaction* self,
                                              gboolean value);
VALA_EXTERN gboolean pamac_transaction_get_remove_if_unneeded (PamacTransaction* self);
VALA_EXTERN void pamac_transaction_set_remove_if_unneeded (PamacTransaction* self,
                                               gboolean value);
VALA_EXTERN gboolean pamac_transaction_get_cascade (PamacTransaction* self);
VALA_EXTERN void pamac_transaction_set_cascade (PamacTransaction* self,
                                    gboolean value);
VALA_EXTERN gboolean pamac_transaction_get_keep_config_files (PamacTransaction* self);
VALA_EXTERN void pamac_transaction_set_keep_config_files (PamacTransaction* self,
                                              gboolean value);
VALA_EXTERN gboolean pamac_transaction_get_install_as_dep (PamacTransaction* self);
VALA_EXTERN void pamac_transaction_set_install_as_dep (PamacTransaction* self,
                                           gboolean value);
VALA_EXTERN gboolean pamac_transaction_get_install_as_explicit (PamacTransaction* self);
VALA_EXTERN void pamac_transaction_set_install_as_explicit (PamacTransaction* self,
                                                gboolean value);
VALA_EXTERN gboolean pamac_transaction_get_no_refresh (PamacTransaction* self);
VALA_EXTERN void pamac_transaction_set_no_refresh (PamacTransaction* self,
                                       gboolean value);
VALA_EXTERN const gchar* pamac_snap_package_get_channel (PamacSnapPackage* self);
VALA_EXTERN const gchar* pamac_snap_package_get_publisher (PamacSnapPackage* self);
VALA_EXTERN const gchar* pamac_snap_package_get_confined (PamacSnapPackage* self);
VALA_EXTERN GPtrArray* pamac_snap_package_get_channels (PamacSnapPackage* self);
VALA_EXTERN GType pamac_updates_checker_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PamacUpdatesChecker, g_object_unref)
VALA_EXTERN PamacUpdatesChecker* pamac_updates_checker_new (void);
VALA_EXTERN PamacUpdatesChecker* pamac_updates_checker_construct (GType object_type);
VALA_EXTERN void pamac_updates_checker_check_updates (PamacUpdatesChecker* self);
VALA_EXTERN guint16 pamac_updates_checker_get_updates_nb (PamacUpdatesChecker* self);
VALA_EXTERN gchar** pamac_updates_checker_get_updates_list (PamacUpdatesChecker* self,
                                                gint* result_length1);
VALA_EXTERN guint64 pamac_updates_checker_get_refresh_period (PamacUpdatesChecker* self);
VALA_EXTERN gboolean pamac_updates_checker_get_no_update_hide_icon (PamacUpdatesChecker* self);

G_END_DECLS

#endif
